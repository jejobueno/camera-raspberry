const Config = require('config');
const tar = require('tar-stream');
const tarFs = require('tar-fs');
const sha256 = require('js-sha256');
const sha256File = require('sha256-file');
const Path = require('path');
const Handlebars = require('handlebars');
const fs = require('fs');
const fse = require('fs-extra');
const chalk = require('chalk');

function generateContent(context, source) {
  const buf = fs.readFileSync(Path.resolve(__dirname, source));
  const middleware = Handlebars.compile(buf.toString());

  const out = middleware(context);

  return out;
}

function saveFile(context, filename, content) {
  const p = `${context.outputFolder}/${filename}`;
  fse.outputFileSync(p, content);
  console.log(`output: ${filename}`);
}

function createResource(context, resourcePath, outResourcePath) {
  const currentPath = Path.resolve(__dirname, resourcePath);
  const content = generateContent(context, currentPath);
  saveFile(context, outResourcePath || resourcePath, content);
}

function randomString(len) {
  const p = 'abcdefghijklmnopqrstuvwxyz0123456789';
  /* eslint no-bitwise: [2, { allow: ["~"] }] */
  return [...Array(len)].reduce(a => a + p[~~(Math.random() * p.length)], '');
}

function createDockerImageLayerResources(context) {
  return new Promise((cb) => {
    const {
      imageIndexFilePath, outputFolder,
      outputSubFolder, folderName,
    } = context;

    const imageIndexBuf = fs.readFileSync(imageIndexFilePath);
    const tarballPath = `${outputFolder}/${outputSubFolder}/${folderName}/layer.tar`;
    const tarball = fs.createWriteStream(tarballPath);

    const pack = tar.pack({
      dmode: parseInt(555, 8), // all dirs should be readable
      fmode: parseInt(444, 8), // all files should be readable
    });

    const ext = Path.extname(imageIndexFilePath);
    pack.entry({ name: `index${ext}` }, imageIndexBuf);
    
    pack.pipe(tarball);

    pack.finalize();

    tarball.on('close', () => fs.stat(tarballPath, (err) => {
      if (err) throw err;
      const sha256tar = sha256File(tarballPath);

      console.log('output: layer.tar');
      cb({
        ...context,
        sha256tar,
      });
    }));
  });
}

function createDockerImageTopLevelResources(config) {
  const {
    imageName, outputFolder, imageIndexFilePath,
    apiVersion = 1, packageVersion,
  } = config;

  const outputSubFolder = `.generated-${randomString(10)}`;
  return new Promise((cb) => {
    const context = {
      imageName: `${imageName}-v${apiVersion}`,
      repoTag: `${imageName}-v${apiVersion}:${packageVersion}`,
      folderName: sha256(randomString(64)),
      outputFolder,
      imageIndexFilePath,
      outputSubFolder,
      packageVersion,
    };

    createResource(context, 'payload/repositories',
      `${outputSubFolder}/repositories`);

    const folderPath = `${outputSubFolder}/${context.folderName}`;

    createResource(context, 'payload/folderName/json',
      `${folderPath}/json`);

    createResource(context, 'payload/folderName/VERSION',
      `${folderPath}/VERSION`);

    cb(context);
  });
}

function createImageLayerResources(context) {
  return new Promise((cb) => {
    const resourcePath = 'payload/sha256ThisFile.json';
    const currentPath = Path.resolve(__dirname, resourcePath);
    const { outputSubFolder } = context;

    const out = generateContent(context, currentPath);
    const sha256Jsonfile = sha256(out);

    const path = `${outputSubFolder}/${sha256Jsonfile}.json`;
    saveFile(context, path, out);

    cb({
      ...context,
      sha256Jsonfile,
    });
  });
}

function createImageJson(context) {
  const { outputSubFolder } = context;

  createResource(context, 'payload/manifest.json',
    `${outputSubFolder}/manifest.json`);
  return context;
}

function createTar(context) {
  return new Promise((cb) => {
    const { outputFolder, outputSubFolder, imageName, packageVersion } = context;
    const sourceFolder = `${outputFolder}/${outputSubFolder}`;

    const tarball = `${outputFolder}/${imageName}-${packageVersion}.tar`;
    tarFs.pack(sourceFolder, {
      dmode: parseInt(555, 8), // all dirs should be readable
      fmode: parseInt(444, 8), // all files should be readable
    })
      .pipe(fs.createWriteStream(tarball).on('close', () => fs.stat(tarball, (err) => {
        if (err) throw err;
        console.log(`output: ${tarball}`);
        cb(context);
      })));
  });
}

function cleanUp(context) {
  const { outputFolder, outputSubFolder } = context;
  const sourceFolder = `${outputFolder}/${outputSubFolder}`;
  return fse.remove(sourceFolder);
}

function validate(config) {
  return new Promise((cb) => {
    if (!config) throw new Error('Cannot find config file - default.yml');
    const { imageName, outputFolder, imageIndexFilePath } = config;

    if (!imageName) throw new Error('Must provide "imageName"');
    if (!outputFolder) throw new Error('Must provide "outputFolder"');
    if (!imageIndexFilePath) throw new Error('Must provide "imageIndexFilePath"');

    try {
      fs.statSync(imageIndexFilePath);
    } catch (err) {
      throw new Error(`Cannot find "${imageIndexFilePath}"`);
    }

    try {
      const pjson = 'package.json';
      fs.statSync(pjson);
      const json = JSON.parse(fs.readFileSync(pjson));
      if (!json.version) {
        throw new Error('no version');
      }
      config.packageVersion = json.version;
    } catch (err) {
      throw new Error(`Cannot read version from 'package.json'`);
    }

    cb(config);
  });
}

function createPackage(config) {
  // {name}.tar
  // untar
  // - repositories
  // - manifest.json
  // - {file: sha256sum}.json
  // - {folder: random-generated-id}
  //   - json
  //   - layer.tar
  //   - VERSION

  validate(config.package)
    .catch(e => console.log(chalk.red(e.message)))
    .then(packageConfig => packageConfig && createDockerImageTopLevelResources(packageConfig)
      .then(context => createDockerImageLayerResources(context))
      .then(context => createImageLayerResources(context))
      .then(context => createImageJson(context))
      .then(context => createTar(context))
      .then(context => cleanUp(context)));
  // .then(packageConfig => )
  // createDockerImageTopLevelResources(packageConfig)
  // .then(context => createDockerImageLayerResources(context))
  // .then(context => createImageLayerResources(context))
  // .then(context => createImageJson(context))
  // .then(context => createTar(context))
  // .then(context => cleanUp(context));
}

createPackage(Config);
